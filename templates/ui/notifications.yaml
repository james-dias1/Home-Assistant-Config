---
# Safety Alerts
# - entity: binary_sensor.smoke_detected
#   exclude_states:
#     - "off"
#   state_map:
#     on: DETECTED
# - entity: binary_sensor.carbon_monoxide_detected
#   exclude_states:
#     - "off"
#   state_map:
#     on: DETECTED

# Doors + Windows
- entity: binary_sensor.front_door
  name: Front Door
  exclude_states:
    - "off"
  state_map:
    on: open
- entity: cover.garage_door
  exclude_states:
    - closed
- entity: binary_sensor.network_closet_door
  exclude_states:
    - "off"
  state_map:
    on: open
- entity: lock.front_door
  name: Front Door
  exclude_states:
    - locked
- entity: binary_sensor.upstairs_bathroom_window
  exclude_states:
    - "off"
  state_map:
    on: open

# ESPHome Devices
# - entity: binary_sensor.ble_hub_status
#   exclude_states:
#     - "on"
- entity: binary_sensor.irrigation_controller_status
  exclude_states:
    - "on"

# Harmony Hubs
- entity: device_tracker.iot_harmonyhub_living_room #binary_sensor.family_room_hub_status
  exclude_states:
    - "home"
# - entity: device_tracker.iot_harmonyhub_play_room #binary_sensor.play_room_hub_status
#   exclude_states:
#     - "home"

# Plex streams
- entity: sensor.plex
  exclude_states:
    - "0"

# Hassio Update
- entity: binary_sensor.update_available
  exclude_states:
    - "off"


#   <style>
#   #flipper {color:#999;}
#   #flip {height:24px;overflow:hidden;}
#   #flip > div > div {color:#fff;height:24px;margin-bottom:24px;display:inline-block;}
#   #flip div:first-child {animation: show 10s linear infinite;}
#   @keyframes show {
#   0% {margin-top:-144px;}
#   5% {margin-top:-96px;}
#   33% {margin-top:-96px;}
#   38% {margin-top:-48px;}
#   66% {margin-top:-48px;}
#   76% {margin-top:0px;}
#   100% {margin-top:0px;}}
#   #flipper p {position:fixed;color:#999; }
#   </style>
#   <div id=flipper><div id=flip><div><div>
#   ... END OF LINE.</div></div><div><div>
#   {{ "Plex viewers: <b>" + states('sensor.plex') + "</b></div></div><div><div>" if states('sensor.plex')|int > 0 }}
#   {{ "Update <b>" + states('sensor.latest_release') + "</b> Available</div></div><div><div>" if is_state('binary_sensor.update_available','on') }}
#   {{ states('sensor.forecast')|trim|replace('<br>','</div></div><div><div>') }}</div></div><div><div>
