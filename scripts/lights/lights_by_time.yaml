---
############################################
## Light brightness adjusts based on time
############################################
lights_by_time:
  #alias: "Set Light Brightness By Time Smartly"
  sequence:
    # Only adjust light brightness if someone is home and the Time Based Dimmers are enabled.
    - condition: template
      value_template: "{{ states.input_boolean.time_based_dimmers_enabled.state == 'on'
                      and states.input_boolean.away_mode.state == 'off'
                      and states.input_boolean.guest_mode.state == 'off' }}"

    # Get the current list of lights that are one.
    - service: script.turn_on
      entity_id: script.lights_on_update

    # Update the brightness value.
    - service: script.turn_on
      entity_id: script.light_brightness_update

    # Adjust the brightness.
    - service: light.turn_on
      data_template:
        brightness: >
          {{ states('variable.light_brightness') }}
        entity_id: >
          {% macro get_lights_to_change(brightness) -%}
            {%- set entity_list = state_attr('group.lights_on','entity_id')|list -%}
            {%- for entity in entity_list -%}
              {#- Omit light if its brightness is already lower than current setting. -#}
              {%- if state_attr(entity, 'brightness')|int >= brightness|int -%}
                  {{ entity }}{{ ' ' }}
              {%- endif -%}
            {%- endfor -%}
          {%- endmacro -%}
          {%- if entity is string -%}
            {{ entity }}
          {%- else -%}
            {%- set brightness = states('variable.light_brightness') -%}
            {%- set lights = get_lights_to_change(brightness)|trim|replace(' ', ',') -%}
            {%- if lights|trim == "" -%}
              {#- To avoid an error: set a dummy light in case no lights are returned. -#}
              {{ 'light.dummy' }}
            {%- else -%}
              {{ lights }}
            {%- endif -%}
          {%- endif %}
