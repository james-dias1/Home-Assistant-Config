---
mode: parallel 
variables:
  media_player: |
    {% if media_player is defined %}
      {{ media_player }}
    {#%- elif states('sensor.last_alexa') is string -%}
      {{ states('sensor.last_alexa') }#}
    {%- else -%}
      media_player.google_kitchen
    {%- endif -%}
  tts_service: |
    {%- if "alexa" in media_player %}
      alexa
    {%- elif "google" in media_player %}
      cloud
    {%- else %}
      speaker_group
    {% endif %}
  briefing: !include ../../templates/speech/briefing.yaml
  title: '{{ title|default("Home Assistant") }}'

  mqtt_message_state: "{{ briefing|striptags }}"
  # mqtt_message_attributes:
  #   target: "{{ media_player }}"

sequence:
  - condition: state
    entity_id: input_boolean.audio_notifications
    state: 'on'

  # - condition: time
  #   after: '06:00:00'
  #   before: '22:00:00'

  # Only update group.lights_on when say_light_check is requested.
  - choose:
      - conditions:
          - '{{ say_light_check == True }}'
        sequence:
          # Update the values that may be needed for the briefing.
          - service: script.turn_on
            entity_id: script.update_lights_on

  - service: 'script.say_{{ tts_service }}'
    data:
      media_player: '{{ media_player }}'
      title: '{{ title }}'
      message: '{{ briefing }}'

  - service: script.toast
    data:
      message: "{{ mqtt_message_state }}"
      duration: 30000

  # Store Last Message
  - service: script.store_mqtt_sensor
    data:
      name: 'last_message'
      state: '{{ mqtt_message_state }}'
      #attributes: '{{ mqtt_message_attributes }}'

  # Store Last Speaker
  - service: script.store_mqtt_sensor
    data:
      name: 'last_speaker'
      state: '{{ media_player }}'
