---
sequence:
  - condition: state
    entity_id: input_boolean.audio_notifications
    state: 'on'

  # - condition: time
  #   after: '06:00:00'
  #   before: '22:00:00'

  # Only update group.lights_on when say_light_check is requested.
  - choose:
      - conditions:
          - condition: template
            value_template: '{{ say_light_check == True }}'
        sequence:
          # Update the values that may be needed for the briefing.
          - service: script.turn_on
            entity_id: script.update_lights_on

  # Speak the message.
  - service: notify.alexa_media
    data_template:
      data:
        type: announce
        method: all
      title: >
        {%- if title is not string -%}
          Home Assistant
        {%- else -%}
          {{ title }}
        {%- endif -%}
      message: !include ../../templates/speech/briefing.yaml
      target: !include ../../templates/speech/media_player.yaml

  # Store a copy of the message for later recall.
  - service: mqtt.publish
    data_template:
      topic: "homeassistant/storage/last_message/state"
      retain: true
      payload: "{{ briefing|striptags }}"
  - service: mqtt.publish
    data_template:
      topic: "homeassistant/storage/last_message/attributes"
      retain: true
      payload: >-
        {
          "target": "{{ media_player }}",
          "day": "{{ as_timestamp(now())|timestamp_custom('%A %B %-d') }}",
          "time": "{{ as_timestamp(now())|timestamp_custom('%H:%M %p') }}"
        }

  # Display a copy of the message as a toast style browser notification.
  - service: script.toast
    data_template:
      message: "{{ briefing|striptags }}"
      duration: 30000
