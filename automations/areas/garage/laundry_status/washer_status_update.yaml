---
alias: Washer status update
id: washer_status_update
description: Update the current washer status when certain criteria are met.
mode: single
trigger:
  # Update washer state when dryer starts drying.
  - id: dryer_is_drying
    platform: state
    entity_id: input_select.dryer_status
    to: "Drying"

  # LG washer running state.
  - id: washer_run_state_change
    platform: state
    entity_id: sensor.washer_run_state
    to: ~

  # Make decisions based on the Washer power usage.
  - id: washer_power_use_high
    platform: numeric_state
    entity_id: sensor.sonoff_s31_02_power
    above: 20
    for:
      minutes: 2
  # - id: washer_power_use_medium
  #   platform: numeric_state
  #   entity_id: sensor.sonoff_s31_02_power
  #   below: 21
  #   above: 3
  #   for:
  #     minutes: 2
  - id: washer_power_use_low
    platform: numeric_state
    entity_id: sensor.sonoff_s31_02_power
    below: 4
    for:
      minutes: 2

  # LG ThinQ reported the washer just powered on.
  - id: washer_from_off_to_on
    platform: state
    entity_id: sensor.washer
    from: "off"
    to: "on"

  # LG ThinQ reported the wash is complete.
  - id: washer_lg_complete
    platform: state
    entity_id: binary_sensor.washer_wash_completed
    from: "off"
    to: "on"

  # LG ThinQ reported an error occurred.
  - id: washer_error_state
    platform: state
    entity_id: binary_sensor.washer_error_state
    from: "off"
    to: "on"
variables:
  #trigger_id: '{{ trigger.to_state.entity_id }}'
  trigger_id: '{{ trigger.id }}'

  run_state: '{{ states("sensor.washer_run_state") }}'
  washer_running: '{{ not run_state == "-" }}'
  previous_status: '{{ states("input_select.washer_status") }}'

  # Off, Standby, Washing, Clean, Error
  status: |
    {% if trigger_id == "washer_from_off_to_on" %}
      Standby
    {%- elif trigger_id == "dryer_is_drying" %}
      Off
    {%- elif trigger_id == "washer_power_use_high" or (trigger_id == "washer_run_state_change" and washer_running) %}
      Washing
    {%- elif trigger_id == "washer_power_use_low" and previous_status != "Clean" %}
      Off
    {%- elif previous_status == "Washing" %}
      Clean
    {%- elif previous_status == "Off" %}
      Standby
    {%- elif trigger_id == "washer_error_state" %}
      Error
    {%- endif %}
  notify_title: '{{ status ~ ": Washing Machine" if status in ["Clean","Error"] }}'
  notify_message: |
    {% if status == "Error" %}
      Error. The washing machine has an error. {{ state_attr('sensor.washer','error_message') }}
    {% endif %}
condition:
  - condition: template
    value_template: '{{ status != previous_status
                      and status != "Unknown" }}'
action:
  - service: input_select.select_option
    data:
      entity_id: input_select.washer_status
      option: '{{ status }}'

  - choose:
      - conditions:
          - '{{ status == "Washing" }}'
        sequence:
          # Cancel the wet laundry alert.
          - service: timer.cancel
            entity_id: timer.washer_clean

      - conditions:
          - '{{ status == "Error" }}'
        sequence:
          - service: script.notify_speech
            data:
              media_player: media_player.google_downstairs
              message: '{{ notify_message }}'

          - service: script.notify_mobile
            data:
              title: '{{ notify_title }}'
              message: '{{ notify_message }}'
              who: brian
              url: /lovelace-special/laundry

  # Cool down timer. When "mode: single" this stops this automation from running more often than this.
  # - In this case it stops the washer from toggling between Clean and back to Washing within 10 seconds.
  #   This should stop the complete announcement from repeating after 1 minute.
  - delay:
      seconds: 300
