---
alias: "Extended Presence: Location Update"
id: xpresence_location_update
description: "When someone's standard presence location updates"
mode: queued
trigger:
  - platform: state
    entity_id:
      - person.brian
      - person.eric
      - person.heather
      - person.lucas
      - person.nerene
      - person.sandy
variables:
  hour: '{{ states("sensor.time").split(":")[0]|int }}'
  new_state: '{{ trigger.to_state.state }}'
  old_state: '{{ trigger.from_state.state }}'
  option: |
    {%- if new_state == "home" -%}
      Just Arrived
    {%- elif new_state == "not_home" -%}
      Just Left
    {%- endif -%}
  person: '{{ trigger.to_state.object_id }}'
  source: '{{ trigger.to_state.attributes.source }}'

condition:
  - '{{ old_state != new_state }}'

  # Only update their "Just Arrived / Left" status when the person is actually just leaving or arriving at home.
  - '{{ old_state in ["home","not_home"]}}'
  - '{{ new_state in ["home","not_home"]}}'

  # Don't allow status change shortly after startup to avoid phantom changes.
  - '{{ is_state("automation.startup","off") }}'

  # Ignore UniFi sourced changes overnight to help avoid false aways caused by sleepy iPhones.
  - condition: not
    conditions:
      - '{{ hour < 6 and source.endswith("_unifi")  }}' # from 0-6am (24h format)

action:
  # - service: script.debug
  #   data_template:
  #     title: "automation.xpresence_location_update"
  #     message: |
  #       {{ person }}
  #       person: {{ states("person." + person) }}
  #       xpresence old: {{ states("input_select." + person) }}
  #       xpresence new: {{ option }}
  #       {{ trigger.to_state }}

  # Change the status to Just Left or Just Arrived.
  - service: input_select.select_option
    data:
      entity_id: "input_select.{{ person }}"
      option: "{{ option }}"

  # Start "Just" status countdown.
  - service: timer.start
    data:
      entity_id: "timer.xpresence_{{ person }}"
      duration: "00:10:00"
