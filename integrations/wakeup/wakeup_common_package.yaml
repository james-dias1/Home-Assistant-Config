---
automation:
  - alias: Wakeup Light Activate
    id: wakeup_light_activate
    # Trigger at the wakeup time everyday.
    trigger:
      - platform: template
        value_template: '{{ is_state("sensor.wakeup_brian_start", states("sensor.time")) }}'
      - platform: template
        value_template: '{{ is_state("sensor.wakeup_lucas_start", states("sensor.time")) }}'
      - platform: template
        value_template: '{{ is_state("sensor.wakeup_nerene_start", states("sensor.time")) }}'
    variables:
      who: |
        {% if is_state("sensor.wakeup_brian_start", states("sensor.time")) %}
          brian
        {% elif is_state("sensor.wakeup_lucas_start", states("sensor.time")) %}
          lucas
        {% elif is_state("sensor.wakeup_nerene_start", states("sensor.time")) %}
          nerene
        {% endif %}

      skipnext_entity: |
        input_boolean.wakeup_{{ who }}_skipnext
      do_not_skipnext: '{{ is_state(skipnext_entity, "off") }}'
      today_name: '{{ now().strftime("%a")|lower }}'
      wakeup_today_entity: |
        input_boolean.wakeup_{{ who }}_{{ today_name }}
      wakeup_today: '{{ is_state(wakeup_today_entity, "on") }}'

    condition:
      # Continue if today is enabled.
      - '{{ is_state("input_boolean.wakeup_" + who +"_status", "on") }}'

      # Continue if they are home.
      - '{{ is_state("person." + who, "home") }}'

      # Continue today is a wakeup day.
      - "{{ wakeup_today }}"
    action:
      # - service: script.debug
      #   data:
      #     message: |
      #       who: {{ who }}

      #       enabled: {{ is_state("input_boolean.wakeup_" + who +"_status", "on") }}
      #       do_not_skipnext: {{ do_not_skipnext }}
      #       wakeup_today: {{ wakeup_today }}

      - choose:
          - conditions:
              - "{{ do_not_skipnext }}"
            sequence:
              - service_template: "script.wakeup_{{ who }}"

              - service: script.toast
                data:
                  message: "{{ who|title }}'s Wakeup Light Complete"

        default:
          service: input_boolean.turn_off
          data:
            entity_id: "{{ skipnext_entity }}"

  - alias: Wakeup Light Timeout
    id: wakeup_light_timeout
    initial_state: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id:
            - timer.wakeup_timeout_brian
            - timer.wakeup_timeout_lucas
            - timer.wakeup_timeout_nerene
    variables:
      who: '{{ trigger.entity_id|replace("timer.wakeup_timeout_","") }}'
    action:
      - service: homeassistant.turn_off
        entity_id:
          - light.home_entry
          - light.garage_entry

      - service_template: "script.wakeup_{{ who }}_timeout"

  - alias: wakeup_warmup_water
    initial_state: true
    trigger:
      # Trigger at wakeup time.
      platform: template
      value_template: >-
        {% macro add_time(time, add_minutes) %}
          {% if time|lower != 'unavailable' %}
            {% set time = time.split(':') %}
            {% set hour = time[0]|int %}
            {% set minutes = time[1]|int %}
            {% if (minutes + add_minutes) < 60 %}
              {{ "%0.02d:%0.02d"|format(hour, minutes + add_minutes) }}
            {% else %}
              {{ "%0.02d:%0.02d"|format(hour + 1, (minutes + add_minutes) - 60) }}
            {% endif %}
          {% endif %}
        {% endmacro %}

        # Trigger the automation 10 minutes after the wakeup time.
        {% set add_minutes = 10 %}
        {% set current_time = states('sensor.time') %}
        {% set brian = add_time(states('sensor.wakeup_brian_start'),add_minutes) %}
        {% set lucas = add_time(states('sensor.wakeup_lucas_start'),add_minutes) %}
        {% set nerene = add_time(states('sensor.wakeup_nerene_start'),add_minutes) %}

        {{ current_time in [brian,lucas,nerene] }}
    condition:
      # Continue if skipnext is not enabled.
      - condition: template
        value_template: >-
          {% if current_time == states('sensor.wakeup_brian_start') %}
            {{ is_state('input_boolean.wakeup_brian_skipnext','on') }}
          {% elif current_time == states('sensor.wakeup_lucas_start') %}
            {{ is_state('input_boolean.wakeup_lucas_skipnext','on') }}
          {% elif current_time == states('sensor.wakeup_nerene_start') %}
            {{ is_state('input_boolean.wakeup_nerene_skipnext','on') }}
          {% endif %}
    action:
      - service: switch.turn_on
        entity_id: switch.hot_water_pump

script:
  wakeup_light_start:
    sequence:
      # Transition the light to 100% over 10 minutes.
      - service: light.turn_on
        data:
          entity_id: "{{ light }}"
          brightness: 26
      - repeat:
          sequence:
            - variables:
                brightness: |
                  {% if repeat.index == 1 %}
                    26
                  {% else %}
                    {% set brightness = state_attr(light, "brightness")|int + 26 %}
                    {{ brightness if brightness < 254 else 254 }}
                  {% endif %}

            - service: light.turn_on
              data:
                entity_id: "{{ light }}"
                brightness: "{{ brightness }}"

            - delay:
                minutes: 1
                #seconds: 5

          until:
            - '{{ is_state_attr(light, "brightness", 254)
              or is_state(light, "off") }}'

      # Start a countdown timer which triggers and automation upon its conclusion.
      # see: automation.wakeup_light_timeout
      - service: timer.start
        data:
          entity_id: '{{ "timer.wakeup_timeout_" ~ who }}'
