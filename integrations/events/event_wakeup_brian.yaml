---
automation:
  - alias: "Event wakeup Brian: light selected"
    id: event_wakeup_brian_light selected
    trigger:
      - platform: state
        entity_id: input_select.event_light_wakeup_brian
    action:
      - if: '{{ states("input_select.event_light_wakeup_brian") not in ["","unavailable","unknown"] }}'
        then:
          - service: input_text.set_value
            target:
              entity_id: input_text.event_light_wakeup_brian
            data:
              value: '{{ states("input_select.event_light_wakeup_brian") }}'

  - alias: "Event wakeup Brian: fill light choices"
    id: event_wakeup_brian_fill_light_choices
    trigger:
      - id: input_select.reload
        platform: event
        event_type: call_service
        event_data:
          domain: input_select
          service: reload
      - id: automation.reload
        platform: event
        event_type: call_service
        event_data:
          domain: automation
          service: reload
      - id: startup_ended
        platform: state
        entity_id: automation.startup
        from: "on"
        to: "off"
    action:
      - if: '{{ trigger.id != "automation.reload" }}'
        then:
          - delay:
              seconds: 5

          - service: input_select.set_options
            target:
              entity_id: input_select.event_light_wakeup_brian
            data:
              options: |
                {%- set area_lights = state_attr("group.family_room_lights", "entity_id") ~ state_attr("group.bedroom_lights", "entity_id") | list %}
                {{ states.light | selectattr("entity_id", "in", area_lights) | map(attribute="name") | sort | list }}

          - delay:
              seconds: 5

      - if: '{{ states("input_select.event_light_wakeup_brian") in ["","unavailable","unknown"] }}'
        then:
          - service: input_select.select_option
            target:
              entity_id: input_select.event_light_wakeup_brian
            data:
              option: '{{ states("input_text.event_light_wakeup_brian") }}'

script:
  event_wakeup_brian:
    sequence:
      - service: homeassistant.turn_off
        target:
          entity_id:
            - fan.bedroom
            - switch.sound_machine

      - service: script.event_light
        data:
          id: wakeup_brian
          light: |
            {%- set light_name = states("input_select.event_light_wakeup_brian") %}
            {%- set entity_list = states.light | selectattr("name","eq",light_name) | map(attribute="entity_id") | list %}
            {{ entity_list[0] }}

  event_timeout_wakeup_brian:
    sequence:
      - service: homeassistant.turn_off
        target:
          entity_id: |
            {%- set light_name = states("input_select.event_light_wakeup_brian") %}
            {%- set entity_list = states.light | selectattr("name","eq",light_name) | map(attribute="entity_id") | list %}
            {{ entity_list[0] }}

input_boolean:
  event_enabled_wakeup_brian:
    name: Active
    icon: mdi:alarm-check
  event_skipnext_wakeup_brian:
    name: Skip next event
    icon: mdi:alarm-check
  event_announcement_wakeup_brian:
    name: Announcements?
    icon: mdi:google-home
  event_light_wakeup_brian:
    name: Wakeup light?
    icon: mdi:lamp

input_datetime:
  event_1st_wakeup_brian:
    name: First announcement
    has_date: false
    has_time: true
  event_2nd_wakeup_brian:
    name: Second announcement
    has_date: false
    has_time: true
  event_light_wakeup_brian:
    name: Light fade-up start
    has_date: false
    has_time: true

input_select:
  event_light_wakeup_brian:
    name: Light fixture
    options:
      - unknown
    icon: mdi:lamp
  event_speakers_wakeup_brian:
    name: Announce in which areas?
    options: !include tts_rooms.txt
    icon: mdi:google-home

input_text:
  event_light_wakeup_brian:
    name: Light fixture
  event_1st_wakeup_brian:
    name: First announcement
  event_2nd_wakeup_brian:
    name: Second announcement

timer:
  event_timeout_wakeup_brian:
    duration: "01:00:00"
    restore: true
