homeassistant:
  customize:
    input_boolean.time_based_dimmers_enabled:
      persistent: true

################################################
## Switches
################################################
input_boolean:
  time_based_dimmers_enabled:
    name: Time Based Lights
    icon: mdi:weather-sunset
    initial: on

################################################
## Scripts
################################################
script:
  dusk:
    alias: Dusk
    sequence:
      - service: homeassistant.turn_on
        entity_id: group.christmas_lights
      - service: homeassistant.turn_on
        entity_id: group.outdoor_lighting
      - service: script.turn_on
        data:
          entity_id: script.outdoor_light_holiday_coloring
      - service: light.turn_on
        data:
          entity_id: light.entry_light
          brightness_pct: '60'
      - service: switch.turn_on
        entity_id: switch.boys_bathroom_nightlight

  morning_devices_off:
    alias: Morning Devices Off
    sequence:
      - service: homeassistant.turn_off
        entity_id: group.outdoor_lighting
      - service: light.turn_off
        entity_id: light.entry_light
      - service: switch.turn_off
        entity_id: switch.boys_bathroom_nightlight

  ############################################
  ## Light brightness adjusts based on time
  ############################################
  set_light_brightness_pct_by_time:
    alias: "Function: Set Light Brightness By Time"
    sequence:
      # Only adjust light brightness if someone is home and the Time Based Dimmers are enabled.
      - condition: template
        value_template: "{{ states.input_boolean.away_mode.state == 'off'
                        and states.input_boolean.time_based_dimmers_enabled.state == 'on' }}"
      # Only dim lights when guest mode is NOT active.
      - condition: template
        value_template: "{{ states.input_boolean.guest_mode.state == 'off' }}"
      - service: light.turn_on
        data_template:
          entity_id: "{{ entity }}"
          ##########################
          # START  | END    | BRI  #
          # ------ | ------ | ---- #
          # 5am    | 8am    |  60% #
          # 8am    | 7pm    | 100% #
          # 7pm    | 7:30pm |  80% #
          # 7:30pm | 8pm    |  60% #
          # 8pm    | 8:30pm |  50% #
          # 8:30pm | 9pm    |  40% #
          # 9pm    | 5am    |  30% #
          ##########################
          brightness_pct: >
            {%- set hour    = states("sensor.time").split(':')[0] | int -%}
            {%- set minutes = states("sensor.time").split(':')[1] | int -%}
            {%- if   hour >=  5 and hour <  8                   -%}60
            {%- elif hour >=  8 and hour < 19                  -%}100
            {%- elif hour >= 19 and minutes < 30 and hour < 20  -%}80
            {%- elif hour >= 19 and minutes > 30 and hour < 20  -%}60
            {%- elif hour >= 20 and minutes < 30 and hour < 21  -%}50
            {%- elif hour >= 20 and minutes > 30 and hour < 21  -%}40
            {%- else                                            -%}30
            {%- endif -%}

################################################
## Automations
################################################
automation:
  ##############################################
  ## Light brightness adjusts based on time
  ##############################################
  - alias: Adjust brightness every half hour
    trigger:
      platform: time
      minutes: '/30'
      seconds: 00
    action:
      - service: script.set_light_brightness_pct_by_time
        data_template:
          entity: "{{ states('sensor.lights_on') }}"

  - alias: Adjust brightness as lights are turned on
    trigger:
      - platform: event
        event_type: state_changed
    condition:
      # Only look at lights.
      - condition: template
        value_template: "{{ trigger.event.data is not none 
                        and trigger.event.data.entity_id is not none
                        and 'light' in trigger.event.data.entity_id|lower }}"
      # Only when lights are going from off to on.
      - condition: template
        value_template: "{{ trigger.event.data.old_state.state == 'off' 
                        and trigger.event.data.new_state.state == 'on' }}"
      # Don't change these lights.
      - condition: template
        value_template: "{{ trigger.event.data.entity_id|lower != 'light.3a4f5b'
                        and trigger.event.data.entity_id|lower != 'light.3a542c'
                        and trigger.event.data.entity_id|lower != 'light.3a5e44'
                        and trigger.event.data.entity_id|lower != 'light.3a76dc'
                        and trigger.event.data.entity_id|lower != 'light.entry'
                        and trigger.event.data.entity_id|lower != 'light.hue'
                        and trigger.event.data.entity_id|lower != 'light.living_room'
                        and trigger.event.data.entity_id|lower != 'light.porch'
                        and not ('garage_entry'  in trigger.event.data.entity_id|lower)
                        and not ('shoe_closet'   in trigger.event.data.entity_id|lower)
                        and not ('gateway_light' in trigger.event.data.entity_id|lower)
                        and not (trigger.event.data.entity_id|lower).endswith('lamp')
                        and not (trigger.event.data.entity_id|lower).endswith('nightlight') }}"
    action:
      - service: script.set_light_brightness_pct_by_time
        data_template:
          entity: "{{ trigger.event.data.entity_id }}"

  ##############################################
  ## Sunrise & Sunset Automations
  ##############################################
  ## 1 1/2 hours after sunrise.
  - alias: Morning +1.5hrs
    trigger:
      - platform: sun
        event: sunrise
        offset: '+1:30:00'
    action:
      - service: script.turn_on
        entity_id: script.morning_devices_off
      - service: script.notify_ios
        data_template:
          title: 'Script: Morning Devices'
          message: "{{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d %b %Y', true) }}"
          who: "brian"
      - service: persistent_notification.create
        data:
          message: "Script: Morning Devices activated at {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d %b %Y', true) }}"

  ## 45 minutes before sunset = "Dusk"
  - alias: Dusk
    trigger:
      - platform: sun
        event: sunset
        offset: "-00:45:00"
    condition:
      - condition: state
        entity_id: input_boolean.time_based_dimmers_enabled
        state: 'on'
    action:
      - service: script.turn_on
        entity_id: script.dusk
      - service: script.notify_ios
        data_template:
          title: 'Script: Dusk'
          message: "Activated at {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d %b %Y', true) }}"
          who: "brian"
      - service: persistent_notification.create
        data:
          message: "Script: Dusk activated at {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d %b %Y', true) }}"