################################################
## Script
################################################
script:
  raincloud_offline_notify:
    alias: Raincloud Offline Notification
    sequence:
      - service: logbook.log
        data:
          name: "Raincloud Offline:"
          message: "If this doesn't resolve itself in a few mintues, send a notification."
      #- service: notify.brian
      #  data:
      #    title: "Raincloud Offline"
      #    message: "Raincloud has been offline for 5 minutes as of {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d%b%Y', true) }}"
      - service: script.notify_ios
        data_template:
          title: "Raincloud: Offline"
          message: "Attempting to restart the Raincloud Base Station. {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d %b %Y', true) }}"
          who: "brian"
      - service: script.notify_web
        data_template:
          title: "Raincloud: Offline"
          message: "Attempting to restart the Raincloud Base Station. {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d %b %Y', true) }}"

  raincloud_watchdog:
    alias: Raincloud Watchdog
    sequence:
      # Wait 30 minutes and test again.
      - delay: 00:30:00
      - condition: state
        entity_id: binary_sensor.aquatimer_control_unit_status
        state: 'off'
      - service: script.turn_on
        entity_id: script.raincloud_offline_notify

################################################
## Automation
################################################
automation:
  - alias: Raincloud Watchdog
    trigger:
      - platform: state
        entity_id: binary_sensor.aquatimer_control_unit_status
        from: 'on'
    action:
      - service: script.turn_on
        entity_id: script.raincloud_watchdog